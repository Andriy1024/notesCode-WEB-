<!DOCTYPE html>
<html>
<head>
	<title>Kласи компонування</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="../style/reset.css">
    <link rel="stylesheet" type="text/css" href="../style/style.css">
    <link rel="stylesheet" type="text/css" href="../style/vs2015.css">
    <script type="text/javascript" src="../js/jquery-3.3.1.min.js"></script>
    <script type="text/javascript" src="../js/jquery.shuffleLetters.js"></script>
    <script type="text/javascript" src="../js/script.js" defer></script>
    <script type="text/javascript" src="../js/highlight.pack.js"></script>
    <link href="../img/ICON.ico" rel="shortcut icon" type="image/x-icon">
    <meta charset="utf-8">
</head>
<body>
<?php require "top.php";?>
<main>
	<div class="manual_wrapper">
		<?php require "sidebar.php";?>
        <div class="content_of_manual">
        <center><h1>Kласи компонування</h1></center>
        <br>
        <p>Система компоновки Qt надає простий і потужний спосіб автоматичного розміщення дочірніх віджетів всередині віджета щоб гарантувати, що вони з користю використовують доступне простір.</p>
        <h2>Вступ</h2>
        <p>Qt включає в себе набір класів управління компонуванням (layout management), які використовуються для опису того, як віджети розташовані в інтерфейсі програми. Ці компонування автоматично позиціонують і змінюють розмір віджетів, коли обсяг доступного простір для них змінюється, гарантуючи що вони однаково розташовані і що призначений для користувача інтерфейс як ціле залишається придатним до використання.</p>
        <p>Все підкласи QWidget можуть використовувати компонування для управління своїми дочірніми елементами. Функція QWidget :: setLayout () прив'язує компоновку до віджету. Коли компоновка встановлена ​​на віджеті цим способом, вона приймає на себе управління наступними завданнями:</p>
        <p>Позиціонування дочірніх віджетів.<br>За умовчанням встановлюються розумні розміри вікон.<br>Розумні мінімальні розміри вікон.<br>Обробка зміни розмірів.<br>Автоматичне оновлення, коли вміст змінилося:</p>
        <p>Розміру шрифту, тексту або іншого вмісту дочірніх віджетів.<br>Приховування або відображення дочірніх віджетів.<br>Видалення дочірніх віджетів.</p>
        <p>Класи компонування Qt були спроектовані для введення коду C ++ вручну, дозволяючи для простоти задавати розміри в пікселях, тому їх легше розуміти і використовувати. Код, згенерований для форм, створених за допомогою Qt Designer'а, також використовує класи компоновки. Qt Designer корисний при використанні, коли проводяться експерименти з дизайном форм без компіляції, компонування і робочого циклу, зазвичай пов'язаного з розробкою користувальницького інтерфейсу.</p>
        <h2>Горизонтальний, вертикальний, компонувальник з сіткою і компонувальник форми</h2>
        <p>Найлегший спосіб завдання правильного розташування віджетів полягає у використанні вбудованих менеджерів компонування: QHBoxLayout, QVBoxLayout, QGridLayout і QFormLayout. Ці класи успадковані від QLayout, який, в свою чергу, походить від QObject (а не від QWidget). Вони беруть на себе турботи по управлінню геометрією безлічі віджетів. Для створення більш складних компоновок ви можете поміщати менеджери компоновок один в одного.</p>
        <p>QHBoxLayout має віджети в горизонтальну лінію з напрямком розміщення зліва направо (або справа наліво для мов з написанням справа наліво).</p>
        <br><img src="images/comp1.png"><br>
        <p>QVBoxLayout має віджети в вертикальну лінію з напрямком зверху вниз.</p>
        <br><img src="images/comp2.png"><br>
        <p>QGridLayout має віджети в двовимірної сітці. Віджети можуть займати кілька осередків.</p>
        <br><img src="images/comp3.png"><br>
        <p>QFormLayout має віджети в 2-столбцовую наочному стилі мітка-поле.</p>
        <br><img src="images/comp4.png"><br>
        <h2>Розміщення віджетів в коді</h2>
        <p>У наступному коді створюється QHBoxLayout, керуючий геометрією п'яти QPushButton, як це показано на першому скріншоті:</p>
        <pre><code class="cpp"> QWidget *window = new QWidget;   

        QPushButton *button1 = new QPushButton("One");   

        QPushButton *button2 = new QPushButton("Two");   

        QPushButton *button3 = new QPushButton("Three");   

        QPushButton *button4 = new QPushButton("Four");   

        QPushButton *button5 = new QPushButton("Five");   

        QHBoxLayout *layout = new QHBoxLayout;   

        layout->addWidget(button1);   

        layout->addWidget(button2);   

        layout->addWidget(button3);   

        layout->addWidget(button4);   

        layout->addWidget(button5);   

        window->setLayout(layout);   

        window->show();   </code></pre>
        <p>Код для QVBoxLayout ідентичний, за винятком рядка, в якій створюється компонувальник. Код для QGridLayout трохи інший, так як ми повинні задавати рядки і стовпці, в яких розташовуються дочірні віджети:</p>
        <pre><code class="cpp">  QWidget *window = new QWidget;   

        QPushButton *button1 = new QPushButton("One");   

        QPushButton *button2 = new QPushButton("Two");   

        QPushButton *button3 = new QPushButton("Three");   

        QPushButton *button4 = new QPushButton("Four");   

        QPushButton *button5 = new QPushButton("Five");   

        QGridLayout *layout = new QGridLayout;   

        layout->addWidget(button1, 0, 0);   

        layout->addWidget(button2, 0, 1);   

        layout->addWidget(button3, 1, 0, 1, 2);   

        layout->addWidget(button4, 2, 0);   

        layout->addWidget(button5, 2, 1);   

        window->setLayout(layout);   

        window->show();  </code></pre>
        <p>Третій віджет QPushButton розтягується на 2 колонки. Це задається за допомогою передачі числа 2 в якості п'ятого аргументу в QGridLayout :: addWidget ().</p>
        <h2>Поради щодо використання компоновок</h2>
        <p>Якщо ви використовуєте компонувальник, то при створенні дочірніх віджетів ви не повинні передавати батька в їх конструктор. Компоновщик автоматично змінить батька віджетів (використовуючи QWidget :: setParent ()), так, щоб вони стали дочірніми віджетами по відношенню до віджету, на якому він (компоновщик) встановлено.</p>
        <p>Зауваження: компонований віджети є дочірніми віджетами по відношенню до віджету, на якому розташований компоновщик, а не по відношенню до самого компонувальнику. Віджети можуть мати в якості батька інший віджет, але не компоновщик.</p>
        <p>Ви можете вставляти компоновщики в інший компоновщик за допомогою addLayout () (); в цьому випадку внутрішній компонувальник стає дочірнім по відношенню до зовнішнього.</p>
        <h2>Додавання віджетів в компоновщик</h2>
        <p>При додаванні віджету в компоновщик, компонувальник виконує наступні дії:</p>
        <p> 1. Всі віджети спочатку розміщуються на просторі, відповідному їх QWidget :: sizePolicy () і QWidget :: sizeHint ().</p>
        <p> 2. Якщо будь-які з віджетів мають значення коефіцієнтів розтягування більше, ніж нуль, то такі віджети займають вільне місце відповідно до їх коефіцієнтами розтягування (пояснення нижче).</p>
        <p> 3. Якщо будь-які з віджетів мають значення коефіцієнта розтягування рівне нулю, то ці віджети отримують додаткове місце тільки в тому випадку, якщо на додаткове місце не претендують інші віджети. Додаткове місце спершу віддається тим з цих віджетів, у яких політика розміру містить Expanding.</p>
        <p> 4. Будь-які віджети, які займають менше місця, ніж того вимагає їх мінімальний розмір (або мінімального місця при відсутності заданого мінімального розміру) розташовуються на мінімальному необхідному просторі. (Віджети не мають мінімального розміру або переваги мінімального розміру, якщо заданий коефіцієнт їх розтягування.)</p>
        <p> 5. Будь-які віджети, які займають більше місця, ніж їх максимальний розмір, розміщуються на просторі, необхідному їх максимальним розміром. (Віджети не мають максимального розміру або переваги максимального розміру, якщо заданий коефіцієнт їх розтягування.)</p>	
        <script type="text/javascript">hljs.initHighlightingOnLoad();</script>
        <div class="comments">
            <div class="fb-comments"  data-width="100%" data-numposts="5"></div>
            <script>
                var url = location.href;
                var comm = document.getElementsByClassName('fb-comments')[0];
                comm.setAttribute('data-href',url);
            </script>
            </div>    
        </div>
    </div>
</main>
<?php require "bottom.php";?>
</body>
</html>
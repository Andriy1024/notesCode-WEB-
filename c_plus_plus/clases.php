<!DOCTYPE html>
<html>
<head>
	<title>Класи в С++</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="../style/reset.css">
    <link rel="stylesheet" type="text/css" href="../style/style.css">
    <link rel="stylesheet" type="text/css" href="../style/vs2015.css">
    <script type="text/javascript" src="../js/jquery-3.3.1.min.js"></script>
    <script type="text/javascript" src="../js/jquery.shuffleLetters.js"></script>
    <script type="text/javascript" src="../js/script.js" defer></script>
    <script type="text/javascript" src="../js/highlight.pack.js"></script>
    <link href="../img/ICON.ico" rel="shortcut icon" type="image/x-icon">
    <meta charset="utf-8">
</head>
<body>
<?php require "top.php";?>
<main>
	<div class="manual_wrapper">
		<?php require "sidebar.php";?>
        <div class="content_of_manual">
        <center><h1>Класи в С++</h1></center>
        <br>
        <p>Класи і об'єкти в С є основними концепціями об'єктно-орієнтованого програмування – ООП. Об'єктно-орієнтоване програмування – розширення структурного програмування, в якому основними концепціями є поняття класів і об'єктів. Основна відмінність мови програмування С від С полягає в тому, що в С немає класів, а отже мова С не підтримує ООП, на відміну від С .</p>
        <p>Щоб зрозуміти, для чого ж насправді потрібні класи, проведемо аналогію з яким-небудь об'єктом з повсякденного життя, наприклад, з велосипедом. Велосипед – це об'єкт, який був побудований згідно з кресленнями. Так ось, ці самі креслення грають роль класів в ООП. Таким чином класи – це деякі описи, схеми, креслення по яких створюються об'єкти. Тепер зрозуміло, що для створення об'єкта в ООП необхідно спочатку скласти креслення, тобто класи. Класи мають свої функції, які називаються методами класу. Пересування велосипеда здійснюється за рахунок обертання педалей, якщо розглядати велосипед з точки зору ООП, то механізм обертання педалей – це метод класу. Кожен велосипед має свій колір, вага, різні складові – все це властивості. Причому у кожного створеного об'єкта властивості можуть відрізнятися. Маючи один клас, можна створити необмежено кількість об'єктів (велосипедів), кожен з яких буде володіти однаковим набором методів, при цьому можна не замислюватися про внутрішню реалізації механізму обертання педалей, коліс, спрацьовування системи гальмування, так як все це вже буде визначено в класі. Розібравшись з призначенням класу, дамо йому грамотне визначення.</p>
        <p>Класи в С – це абстракція, що описує методи, властивості, ще не існуючих об'єктів. Об'єкти – конкретне уявлення абстракції, що має свої властивості і методи. Створені об'єкти на основі одного класу називаються екземплярами цього класу. Ці об'єкти можуть мати різну поведінку, властивості, але все одно будуть об'єктами одного класу. В ООП існує три основних принципи побудови класів:</p>
        <p>1. Інкапсуляція – це властивість, що дозволяє об'єднати в класі і дані, і методи, які працюють з ними і приховати деталі реалізації від користувача.</p>
        <p>2. Спадкування – це властивість, що дозволяє створити новий клас-нащадок на основі вже існуючого, при цьому всі характеристики класу батька присвоюються класу-нащадка.</p>
        <p>3. Поліморфізм – властивість класів, що дозволяє використовувати об'єкти класів з однаковим інтерфейсом без інформації про тип і внутрішню структуру об'єкта.</p>
        <p>Кожна властивість побудови класів ми розглянемо докладно в міру необхідності, а поки просто запам'ятайте ці три. А тепер повернемося до класів, для початку розглянемо структуру оголошення класів.</p>
        <pre><code class="cpp">   // объявление классов в С++
        class /*имя класса*/
        {

            private:

            /* список властивостей і методів для використання всередині класу */

            public:

            /* список методів доступних інших функцій і об'єктів програми */

            protected:

            /*список засобів, доступних при спадкуванні*/

        };</code></pre>
        <p>Оголошення класу починається з зарезервованого ключового слова клас, після якого пишеться ім'я класу. У фігурних дужках, рядки 3 – 10 оголошується тіло класу, причому після закривається скобочки обов'язково потрібно ставити крапку з комою, рядок 10. У тілі класу оголошуються три мітки специфікації доступу, рядки 4, 6, 8, після кожної мітки потрібно обов'язково ставити двокрапку. В рядку 4 оголошена мітка специфікатора доступу private. Всі методи і властивості класу, оголошені після специфікатор доступу private будуть доступні тільки усередині класу. В рядку 6 оголошений специфікатор доступу public, всі методи і властивості класу, оголошені після специфікатора доступу public будуть доступні іншим функціям та об'єктам в програмі. Поки на цьому зупинимося, специфікатор доступу protected розбирати зараз не будемо, просто запам'ятайте, що він є. При оголошенні класу, не обов'язково оголошувати три специфікатора доступу, і не обов'язково їх оголошувати в такому порядку. Але краще відразу визначитися з порядком оголошення специфікаторів доступу, і намагатися його дотримуватися. Розробимо програму, в якій оголосимо найпростіший клас, в якому буде оголошена одна функція, друкуюча повідомлення.</p>
        <pre><code class="cpp">  1. #include "stdafx.h"

        2. #include iostream

        3. using namespace std;

        4. // початок оголошення класу

        5. class CppStudio // імя класу

        6. {

        7. public: // специфікатор доступу

        8. void message() // функція (метод класу) виводить повідомлення на екран

        9. {

        10. cout << "website: cppstudio.com\ntheme: Classes and Objects in C + +\n";

        11. }

        12. }; // кінець оголошення класу CppStudio

        13. int main(int argc, char* argv[])

        14. {

        15. CppStudio objMessage; // оголошення об'єкта

        16. objMessage.message(); // виклик функції класу message

        17. system("pause");

         18. return 0;

        19. }</code></pre>
        <p>В рядках 5 – 15 ми визначили клас з ім'ям CppStudio. Ім'я класу прийнято починати з великої літери, наступні слова в імені також повинні починатися з великої літери. Таке поєднання букв називають верблюжим регістром, так як чергування великих і маленьких букв нагадує силует верблюда. У тілі класу оголошений специфікатор доступу public, який дозволяє викликати інших функцій методи класу, оголошені після public. Ось саме тому у головній функції, в рядку 16 ми змогли викликати функцію message(). В класі CppStudio оголошена всього одна функція, яка не має параметрів і виводить повідомлення на екран, рядок 10. Методи класу – це ті ж функції, тільки оголошені вони всередині класу, тому все що відноситься до функцій актуально і для методів класів. Оголошення класів виконується аналогічно оголошенню функцій, тобто клас можна оголошувати в окремому файлі або в головному файлі, пізніше подивимося як це робиться. В рядку 15 оголошена змінна objMessage типу CppStudio, так ось, змінна objMessage – це об'єкт класу CppStudio. Таким чином, клас є складним типом даних. Після того як об'єкт класу оголошений, можна скористатися його методами. Метод всього один – функція message(). Для цього звертаємося до методу об'єкта objMessage через точку, як показано в рядку 16</p>
        <p>Кожен об'єкт має якісь свої властивості або атрибути, які характеризують його протягом усього життя. Атрибути об'єкта зберігаються в змінних, оголошених всередині класу, якому належить даний об'єкт. Причому, оголошення змінних повинно виконуватися зі специфікатором доступу private. Такі змінні називаються елементами даних. Так як елементи даних оголошені в private, то і доступ до них можуть отримати тільки методи класу, зовнішній доступ до елементів даних заборонений. Тому прийнято оголошувати в класах спеціальні методи – так звані set і get функції, за допомогою яких можна маніпулювати елементами даних. Набір-функції инициализируют елементи даних, отримати-функції дозволяють переглянути значення елементів даних. Доопрацюємо клас CppStudio так, щоб у ньому можна було зберігати дату в форматі дд.мм.гг. Для зміни і перегляду дати реалізуємо відповідно set і get функції.</p>
        <pre><code class="cpp">  1. #include "stdafx.h"

        2. #include < iostream >

        3. using namespace std;

        4. class CppStudio // імя класа

        5. {

        6. private: // специфікатор доступу private

        7. int day,month,year;

        8. public: // специфікатор доступу public

        9. void message() // функція (метод класа) яка виводить повідомлення на екран

        10. {

        11. cout << "\nwebsite: cppstudio.comntheme: Classes and Objects in C + +\n";

        12. }

        13. void setDate(int date_day, int date_month, int date_year)

        14. {

        15. day = date_day; // иніціалізация день

        16. month = date_month; // иніціалізация місяць

        17. year = date_year; // иніціалізация рік

        18. }

        19. void getDate() // відобразити поточну дату

        20. {

        21. cout << "Date: " << day << "." << month << "." << year << endl;>

        22. }

        23. }; // кінець оголошення класу CppStudio

        24. int main(int argc, char* argv[])

        25. {

        26. setlocale(LC_ALL, "ukr");

        27. int day, month, year;

        28. cout << "Введіть поточний день місяць і рік!\n";

        29. cout << "день: "; cin >> day;

        30. cout << "мiсяць: "; cin >> month;

        31. cout << "год: "; cin >> year;

        32. CppStudio objCppstudio; // оголошення об'єкта

        33. objCppstudio.message(); // виклик функції класу message

        34. objCppstudio.setDate(day, month, year); // ініціалізація дати

        35. objCppstudio.getDate(); // відобразити дату

        36. system("pause");

        37. return 0;

        38. }</code></pre>
        <p>У визначенні класу з'явився новий специфікатор доступу private, рядок 6. Даний специфікатор доступу обмежує доступ до змінних, які оголошені після нього і до початку специфікатора доступу public, рядки 6 – 7. Таким чином до змінних day, month, year, можуть отримати доступ тільки методи класу. Функції не належать класу, не можуть звертатися до цих змінним. Елементи даних або методи класу, оголошені після специфікатора доступу private, але до початку наступного специфікатора доступу називаються закритими елементами даних і закритими методами класу. Дотримуючись принципу найменших привілеїв і принципом хорошого програмування, доцільно оголошувати елементи даних після специфікатора доступу private, а методи класу – після специфікатора доступу public. Тоді, для маніпулювання елементами даних, оголошуються спеціальні функції – get і set. В клас CppStudio ми додали два методи setDate() і getDate(), детально розглянемо кожен метод. Метод setDate() визначений з 13 по 18 рядки. Як вже раніше згадувалося, набір – функції инициализируют елементи даних, тому метод setDate() виконує саме таку функцію. Тобто метод setDate() инициализирует змінні day, month, year. Щоб переглянути, значення в закритих елементах даних оголошена функція getDate(), яка повертає значення з змінних day, month, year у вигляді дати.На цьому визначення класу закінчено, в основний(), як і завжди, створюємо об'єкт класу, і через об'єкт викликаємо його методи,рядки 33 – 35. Якби елементи даних були оголошені після специфікатора public ми б змогли до них звернутися точно також, як і до методів класу. </p>
        <script type="text/javascript">hljs.initHighlightingOnLoad();</script>
        <div class="comments">
             <div class="fb-comments"  data-width="100%" data-numposts="5"></div>
             <script>
                     var url = location.href;
                     var comm = document.getElementsByClassName('fb-comments')[0];
                     comm.setAttribute('data-href',url);
             </script>
        </div>   
        </div>
    </div>
</main>
<?php require "bottom.php";?>
</body>
</html>
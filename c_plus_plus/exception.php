
        <center><h1>exception в С++</h1></center>
        <br>
        <p>Всім нам інтуїтивно зрозуміло що таке виключення. Це якась дія, яка набирає чинності, при настанні нестандартної ситуації. Говорячи про про винятки в С ++, розглянемо одну з таких нестандартних ситуацій - поділ на 0. Уявіть, що ми працюємо в програмі, де вручну вносимо багато числових даних. Далі, в результаті якихось розрахунків програми, значення однієї із змінних стане рівним 0. А в наступному рядку коду це значення виступає дільником. Звичайно, ця дія призведе до неминучого закриття програми і виходу з неї. І ви можете собі уявити свій стан, коли півгодини вводите дані, працюючи в цій програмі, і на якомусь етапі вона просто перестає працювати і закривається, а всі дані пропадають.</p>
        <p>У цій статті буде наведено дуже простий і короткий приклад, який допоможе розібратися з винятками в С ++. У ньому користувачеві буде запропоновано ввести два числа і програма проведе прості розрахунки з цими числами. Введення і розрахунки будуть проводитися певна кількість раз - за допомогою циклу while.</p>
        <p>Спочатку наберіть вихідний код нижче і скомпілюйте. У змінну num2 внесіть число 0, щоб у вас було розуміння тієї проблеми, що якщо в програмі зустрічається поділ на 0, вона різко припиняє роботу, хочете ви цього чи ні.</p>
        <pre><code class="cpp">  1. #include < iostream >;   

        2. using namespace std;   

        3. int main()   

        4. {   

        5.      setlocale(LC_ALL, "ukr");   

        6.      int num1;   

        7.      int num2;   

        8.      int var = 2; // керуюча змінна для while   

        9.      while(var--) // поки var - істина (не дорівнює 0)   

        10.     {   

        11.         cout << "Введіть значення num1: ";   

        12.         cin >> num1;   

        13.         cout << "Введіть значення num2: ";   

        14.         cin >> num2;   

        15.         cout << "num1 + num2 = " << num1 + num2 << endl;   

        16.         cout << "num1 / num2 = " << num1 / num2 << endl;   

        17.         cout << "num1 - num2 = " << num1 - num2 << endl;   

        18.         cout << "=================================" << endl << endl;   

        19.     }   

        20.     cout << "Програм ма завершила работу!" << endl << endl;   

        21.     return 0;   

        22. }  </code></pre>
        <p>У програмі цикл повинен відпрацювати два рази. У рядку 9 ми передаємо циклу значення змінної var і в цьому ж рядку зменшуємо її на одиницю, використовуючи операцію декремента (var--). Але, якщо в змінну num2 буде введено значення 0, ми побачимо тільки результат складання a + b і програма завершить роботу не залежно від того, є код нижче чи ні, відпрацював цикл чи ні.</p>
        <p>Використовуючи виключення, ми зможемо уникнути таких проблем. Щоб «прикрутити» виняток до цього прикладу, треба познайомитися з наступними командами С ++: throw (в перекладі - обробити, запустити), try (спроба), catch (зловити, ловити) .В вихідному коді нижче, виняток спрацює так: програма отримує конкретне вказівку від програміста - якщо значення певної змінної в певній ділянці коду (в try-блоці) дорівнюватиме 0, то в цьому випадку нехай генерується виключення throw. Це виняток автоматично передасться catch-блоку у вигляді параметра і виконається код цього блоку.</p>
        <p>Відразу розглянемо приклад. А все докладні пояснення по вихідного коду і теорія будуть розташовуватися під ним:</p>
        <pre><code class="cpp">   1. #include < iostream >;   

        2. using namespace std;   

        3. int main()   

        4. {   

        5. setlocale(LC_ALL, "ukr");   

        6. int num1;   

        7. int num2;   

        8. int var = 2;   

        9. while(var--)   

        10. {   

        11. cout << "Введіть значення num1: ";   
        
        12. cin >> num1;   

        13. cout << "Введіть значення num2: ";   

        14. cin >> num2;   

        15. cout << "num1 + num2 = " << num1 + num2 << endl;   

        16. cout << "num1 / num2 = ";   

        17. try // код, який може привести до помилки, розташовується тут   

        18. {   

        19. if (num2 == 0)   

        20. {   

        21. throw 123; //генерувати ціле число 123   

        22. }   

        23. cout << num1 / num2 << endl;   

        24. }   

        25. catch(int i)//сюда передається число 123   

        26. {   

        27. cout << "Помилка №" << i << " - на 0 делить нельзя!!!!" << endl;   

        28. }   

        29. cout << "num1 - num2 = " << num1 - num2 << endl;   

        30. cout << "=================================" << endl << endl;   

        31. }   

        32. cout << "Программа завершила работу!" << endl << endl;   

        33. return 0;   

        34. 
        }   </code></pre>
        <p>У рядках 17 - 24 визначено try-блок. У ньому розташовується код, який потенційно може викликати помилку в роботі програми, а саме помилку в разі поділу на 0. Задаємо умова if - якщо num2 дорівнює 0, то генерувати ціле число 123, наприклад. В цьому випадку try-блок відразу припиняє виконання подальших команд, а число 123 «падає» в catch. У нашому прикладі він виводить повідомлення про помилку. При цьому програма продовжує працювати і виконувати команди, розміщені нижче. Якщо ж число num2 не дорівнюватиме нулю, то в try-блоці виконається команда cout << num1 / num2 << endl; , А catch не спрацює.</p>
        <p>Щоб краще зрозуміти, як саме значення, яке генерує throw передається в catch, спробуйте замінити ділянку коду рядків 22 - 33 на наступний код:</p>
        <pre><code class="cpp">  1. try   

        2. {   

        3.      if (num2 == 0)   

        4. {  

        5.      throw "Помилка - на 0 Ділити не можна!!!!"; // генерувати символьний рядок   

        6. }  

        7. cout << num1 / num2 << endl;   

        8. }  

        9. catch(char *str) //Сюда передається стрічка  

        10. {   

        11.     cout << str << endl;   

        12. }   </code></pre>
        <p>Тут при спробі поділу на 0, throw генерується не число, а символьний рядок. І блоку catch в дужках ми показуємо, що він буде приймати покажчик на рядок і нижче - виводити цей рядок на екран.</p>
        <p>Виняток так само може генеруватися в певній програмістом функції. Наприклад у нас визначена функція розподілу двох цілих чисел і в ній ми відразу перевіримо розподіл на 0.</p>
       <pre><code class="cpp">  1. int division(int n1, int n2)   

        2. {   

        3. if (n2 == 0)   

        4. {   

        5. throw 99;   

        6. }   

        7. return n1 / n2;   

        8. }   </code></pre>
        <p>А викликати цю функцію, звичайно треба в try-блоці.</p>
        <pre><code class="cpp"> 1. try   

        2. {   

        3.      cout << division(5, 0);   

        4.      cout << endl;   

        5. }   

        6. catch(int i)   

        7. {   

        8.      cout << "Помилка №" << i << " Ділення на ноль." << endl;   

        9. }  </code></pre>
        <p>Ділення на нуль не станеться й catch зловить число 99.</p>
        <p>Що важливо запам'ятати про винятки:</p>
        <p>1. try-блок - так званий блок повторних спроб. У ньому треба розташовувати код, який може привести до помилки і аварійного закриття програми;</p>
        <p>2. throw генерує виняток. Те що зупинить роботу try-блоку і призведе до виконання коду catch-блоку. Тип винятку повинен відповідати, типу прийнятого аргументу catch-блоку;</p>
        <p>3. catch-блок - вловлює блок, зловить то, що визначив throw і виконає свій код. Цей блок повинен розташовуватися безпосередньо під try-блоком. Ніякої код не повинен їх розділяти.</p>
        <p>4. якщо в try-блоці винятку не генерувалося, catch-блок не спрацює. Програма його обійде.</p>
        <script type="text/javascript">hljs.initHighlightingOnLoad();</script>
       
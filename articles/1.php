<!DOCTYPE html>
<html>
<head>
	<title>Сім основних методологій розробки</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" type="text/css" href="../style/reset.css">
	<link rel="stylesheet" type="text/css" href="../style/style.css">
	<script type="text/javascript" src="../js/jquery-3.3.1.min.js"></script>
	<script type="text/javascript" src="../js/jquery.shuffleLetters.js"></script>
	<script type="text/javascript" src="../js/script.js" defer></script>
	<link href="../img/ICON.ico" rel="shortcut icon" type="image/x-icon">
	<meta charset="utf-8">
</head>
<body>
<?php require "../index/top.php";?>
<main>
	<div class="information">
		<h1>Сім основних методологій розробки</h1>
		<p>The development of a software product knows a lot of decent methodologies - in other words, well-established best practices. The choice depends on the specifics of the project, the budgeting system, subjective preferences and even the temperament of the manager.</p>
        <img src="img/article1.jpg" alt="">
        <h2>1. «Waterfall Model»  (каскадна модель або «водопад»)</h2><hr>
        <img src="img/article2.jpg" alt="">
        <p>Одна з самих старих, підпорядковуючи послідовне прохолодний стадій, котра повинна завершитися до початку наступної. В моделях Водоспад легко управлять проектом. Благодаря їй важко, розробку йде швидке, вартість і термін оплати визначені. Но це палка о двух концах. Каскадная модель буде давати відмінний результат тільки в проектах з четкою і плановою визначеністю та способами їх реалізації. Немає можливості зробити крок назад, тестування починається тільки після того, як розробка завершена або майже завершена. Продукты, розроблені за даною моделлю без обізнаного її вибору, можуть мати недостатність (список вимовлених у будь-який момент), про які йдеться, наприклад, про строгість послідовності дій. Стоимость внесения змін висоти, так як для її ініціалізації приходиться завершення всього проекту. Тем не менш, фіксованої вартості часто перевешивает минуси підходу. Виділення особливо важливе в процесі створення недостатньо можливо, і, на жаль, вимагає від одного з трьох додаткових домовленостей щодо контракту з невеликим ТЗ.</p>
        <p>Коли использовать каскадную методологию?</p>
        <p> - Только тоді, коли вимоги відомі, понятні і зафіксировані. Противоречивые вимоги не імеется.</p>
        <p> - Не проблема з доступністю программистов нужной кваліфікації.</p>
        <p> - В відносно невеликих проектах</p>
        <h2>2. «V-Model»</h2><hr>
        <img src="img/article3.jpg" alt="">
        <p>Досліджено структуру «шаг за шагом» від каскадной моделі. В-образна модель прикладу до системи, що особливо важливо бесперебойне функціонування. Наприклад, прикладні програми в клініці для спостереження за пацієнтами, інтегровані ПО для механізмів керування аварийними системами безпеки в транспортних засобах і так далі. Особливість моделі дозволяє вважати, що вона була спрямована на перевірку та тестування продукту, що вже з'явилася на первинних стадіях проектування. Стадія тестування проводиться одночасно з відповідною стадією розробки, наприклад, під час кодування пішуться модульні тести.</p>
        <p>Коли використовується V-модель?</p>
        <p> - Якщо потрібно тщательное тестування продукту, то V-модель оправдає закладене в себе ідею: перевірка і перевірка.</p>
        <p> - Для малих і середніх проектів, де вимоги четко визначені і фіксовані.</p>
        <p> - В умовах доступності інженерів необхідна кваліфікація, особливо тестировщиков.</p>
        <h2>«Incremental Model»</h2><hr>
        <p>В инкрементной модели полные требования к системе делятся на различные сборки. Терминология часто используется для описания поэтапной сборки ПО. Имеют место несколько циклов разработки, и вместе они составляют жизненный цикл «мульти-водопад». Цикл разделен на более мелкие легко создаваемые модули. Каждый модуль проходит через фазы определения требований, проектирования, кодирования, внедрения и тестирования. Процедура разработки по инкрементной модели предполагает выпуск на первом большом этапе продукта в базовой функциональности, а затем уже последовательное добавление новых функций, так называемых «инкрементов». Процесс продолжается до тех пор, пока не будет создана полная система.</p>
        <img src="img/article4.jpg" alt="">
        <p>Инкрементные модели используются там, де окремі запитання про зміну можуть бути легко формалізовані та реалізовані. У наших проектах ми застосовуємо її для створення читачів DefView, а також для встановлення електронних бібліотек Вівальді.</p>
        <p>Як приклад опишем свій спосіб інкремента. Сеть електронних бібліотек Вівальді пришла на смену DefView. DefView підключається до одного сервера документів, а тепер може підключатися до багатьох. На площадці закладів, що потребують транзиту свого контентного аудиторії, встановлюється серверний ресурс, який здійснює обробку документів і перетворення їх у нужний формат. Появився корневий елемент архітектури - центральний сервер Вівальді, який виступає в рамках єдиної пошукової системи по кожному серверу зберігання, встановленому в різних установах.</p>
        <p>Коли використовувати инкрементную модель?</p>
        <p> - Коли основні вимоги до системи четко визначені і понятны. У теперішній час деякі деталі можуть дорабатываться з потоком часу.</p>
        <p> - Требується ранній вихід продукту на ринок.</p>
        <p> - Є кілька рискових фіч або цілей.</p>
        <h2>4. «RAD Model» (rapid application development model або швидка разрабка)</h2><hr>
        <p>RAD-модель - разновидность інкрементной моделі. У РАД-моделях компоненти або функції розв'язуються декількома висококваліфікованими командами паралельно, будто кілька міні-проектів. Часові рамки одного цикла жорстко обмежені. Созданные модули потім інтегруються в один робочий прототип. Синергія дозволяє дуже швидко надати клієнту для обозрения що-то робоче з ціллю отримання зворотної зв'язку та внесення змін.</p>
        <img src="img/article5.jpg" alt="">
        <p>Модель быстрой розробки додатків включає наступні фазы:</p>
        <p> - Бізнес-моделі: визначення списку інформаційних потоків між різними подразделениями.</p>
        <p> - Моделювання даних: інформація, собранная на попереднє етапі, що використовується для визначення об'єктів і імен сутностей, необхідних для циркуляції інформації.</p>
        <p> - Моделювання процесу: інформаційні потоки зв'язків об'єктів для досягнення цілей розробки.</p>
        <p> - Сборка приложений: используются средства автоматической збірки для перетворення моделей систем автоматичного проектування в коді.</p>
        <p> - Тестування: тестируются нові компоненти і інтерфейси.</p>
        <p>Коли використовується RAD-модель?</p>
        <p>Может використовуватися тільки при наявності висококваліфікованих і узкоспециализированных архитекторов. Бюджет проекта большой, щоб оплатити цих спеціалістів разом зі всіма готовими інструментами автоматизованого збору. РАД-модель може бути вибрана при уверенном знанні цільового бізнесу і необхідності срочного виробництва системи протягом 2-3 місяців.</p>
        <h2>5. «Agile Model» (гнучка методологія розробки)</h2><hr>
        <img src="img/article6.jpg" alt="">
        <p>«Гнучка» методології розробки після кожної ітерації може відзначити результат і розуміння, задовольнити його або нет. Це одно з переваг гибкой моделі. До її недостаткам відносять те, що з-за відсутності конкретних формулювань результатів складно оцінити трудозатрати і вартість, необхідні на розробку. Екстремальне програмування (XP) є одним з найвідоміших прикладів змінної моделі на практиці.</p>
        <p>В основі такого типу - непродовжувані щоденні зустрічі - «Scrum» і регулярно повторюється зібрання (розмножується). На щоденних консультаціях учасників команд суперечать:</p>
        <p> - звіт про виконану роботу з моменту останнього Scrum'a;</p>
        <p> - список завдань, які співробітник повинен виконати до наступних зборів;</p>
        <p> - труднощі, що виникли в ході роботи.</p>
        <p>Методологія підходить для великих або націлених на тривалий життєвий цикл проектів, постійно адаптуються до умов ринку. Відповідно, в процесі реалізації вимоги змінюються. Варто згадати клас творчих людей, яким властиво генерувати, видавати і випробувати нові ідеї щотижня або навіть щодня. Гнучка розробка найкраще підходить для цього психотипу керівників. Внутрішні стартапи компанії ми розробляємо по Agile. Прикладом клієнтських проектів є Електронна Система медичного огляду, створена для проведення масових медоглядів в лічені хвилини. У другому абзаці цього відкликання, наші американські партнери описали дуже важливу річ, принципову для успіху на Agile.</p>
        <p>Коли використовувати Agile?</p>
        <p> - Коли потреби користувачів постійно змінюються в динамічному бізнесі.</p>
        <p> - Зміни на Agile реалізуються за меншу ціну через часті інкрементів.</p>
        <p> - На відміну від моделі водоспаду, в гнучкою моделі для старту проекту достатньо лише невеликого планування.</p>
        <h2>6. «Iterative Model»</h2><hr>
        <p>Ітераційна модель життєвого циклу не вимагає для початку повної специфікації вимог. Замість цього, створення починається з реалізації частини функціоналу, що стає базою для визначення подальших вимог. Цей процес повторюється. Версія може бути неідеальна, головне, щоб вона працювала. Розуміючи кінцеву мету, ми прагнемо до неї так, щоб кожен крок був результативним, а кожна версія - працездатна.</p>
        <img src="img/article7.jpg" alt="">
        <p>На діаграмі показана итерационная «розробка» Мона Лізи. Як видно, в першій ітерації є лише начерк Джоконди, в другій - з'являються кольору, а третя ітерація додає деталей, насиченості і завершує процес. У инкрементной ж моделі функціонал продукту нарощується по шматочках, продукт складається з частин. На відміну від итерационной моделі, кожен шматочок являє собою цілісний елемент.</p>
        <p>Прикладом итерационной розробки може служити розпізнавання голосу. Перші дослідження і підготовка наукового апарату почалися давно, на початку - в думках, потім - на папері. З кожною новою итерацией якість розпізнавання поліпшувалося. Проте, ідеальне розпізнавання ще не досягнуто, отже, завдання ще не вирішена повністю.</p>
        <p>Коли оптимально використовувати ітеративну модель?</p>
        <p> - Вимоги до кінцевої системі заздалегідь чітко визначені і зрозумілі.</p>
        <p> - Проект великий або дуже великий.</p>
        <p> - Основне завдання повинна бути визначена, але деталі реалізації можуть еволюціонувати з плином часу.</p>
        <h2>7. «Spiral Model»</h2><hr>
        <img src="img/article8.jpg" alt="">
        <p>«Спіральна модель» схожа на інкрементного, але з акцентом на аналіз ризиків. Вона добре працює для вирішення критично важливих бізнес-задач, коли невдача несумісна з діяльністю компанії, в умовах випуску нових продуктових лінійок, при необхідності наукових досліджень і практичної апробації.</p>
        <p>Спіральна модель передбачає 4 етапи для кожного витка:</p>
        <p>1. планування;</p>
        <p>2. аналіз ризиків;</p>
        <p>3. конструювання;</p>
        <p>4. оцінка результату і при задовільній якості перехід до нового витка.</p>
        <p>Ця модель не підійде для малих проектів, вона резонна для складних і дорогих, наприклад, таких, як розробка системи документообігу для банку, коли кожен наступний крок вимагає більшого аналізу для оцінки наслідків, ніж програмування. На проекті з розробки СЕД для ОДУ Сибіру СО ЄЕС два наради про зміну кодифікації розділів електронного архіву займають в 10 разів більше часу, ніж об'єднання двох папок програмістом. Державні проекти, в яких ми брали участь, починалися з підготовки експертним співтовариством дорогої концепції, яка аж ніяк не завжди марна, оскільки окупається в масштабах країни.</p>
        <h2>Підсумуємо</h2><hr>
        <img src="img/article9.jpg" alt="">
        <p>На слайді продемонстровані відмінності двох найбільш поширених методологій.</p>
        <p>У сучасній практиці моделі розробки програмного забезпечення багатоваріантних. Немає єдино вірною для всіх проектів, стартових умов і моделей оплати. Навіть така улюблена всіма нами Agile не може застосовуватися повсюдно через неготовність деяких замовників або неможливості гнучкого фінансування. Методології частково перетинаються в засобах і частково схожі один на одного. Деякі інші концепції використовувалися лише для пропаганди власних компіляторів і не привносили в практику нічого нового.</p>
        <p>Статтю взято з : https://habr.com/company/edison/blog/269789/</p>
        <div class="comments">
            <div class="fb-comments"  data-width="100%" data-numposts="5"></div>
            <script>
                     var url = location.href;
                     var comm = document.getElementsByClassName('fb-comments')[0];
                     comm.setAttribute('data-href',url);
            </script>
            </div>
        </div> 
	</div>
</main>
<?php require "../index/bottom.php";?>
</body>
</html>